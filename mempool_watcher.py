"""
Mempool Watcher ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–∏–∑–∫–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π –≤ –º–µ–º–ø—É–ª–µ Bitcoin.
"""

import requests
import argparse

def fetch_mempool(limit=10, max_fee_rate=5):
    url = "https://mempool.space/api/mempool/recent"
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ–º–ø—É–ª–∞.")
    txs = r.json()

    filtered = [tx for tx in txs if tx.get("feePerVsize", 0) <= max_fee_rate]
    return filtered[:limit]

def display(txs):
    if not txs:
        print("‚úÖ –í –º–µ–º–ø—É–ª–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–∞–∫–æ–π –Ω–∏–∑–∫–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π.")
        return

    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(txs)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–∏–∑–∫–æ–π fee rate:")
    for i, tx in enumerate(txs, 1):
        print(f"{i}. TXID: {tx['txid']}")
        print(f"    Fee rate: {tx['feePerVsize']} sat/vB")
        print(f"    –†–∞–∑–º–µ—Ä: {tx['vsize']} vB | –ö–æ–º–∏—Å—Å–∏—è: {tx['fee']} —Å–∞—Ç–æ—à–∏")
        print()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Mempool Watcher ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–∏–∑–∫–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π.")
    parser.add_argument("-l", "--limit", type=int, default=10, help="–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑–∞—Ç—å")
    parser.add_argument("-f", "--fee", type=int, default=5, help="–ú–∞–∫—Å. fee rate (sat/vB)")
    args = parser.parse_args()

    try:
        txs = fetch_mempool(args.limit, args.fee)
        display(txs)
    except Exception as e:
        print(f"‚ö†Ô∏è {e}")
